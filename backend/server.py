from fastapi import FastAPI, APIRouter, HTTPException, Request, Query
from dotenv import load_dotenv
from starlette.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorClient
import os
import logging
import requests
import json
import hashlib
import secrets
from pathlib import Path
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
import uuid
import re

ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

# MongoDB connection
mongo_url = os.environ['MONGO_URL']
client = AsyncIOMotorClient(mongo_url)
db = client[os.environ['DB_NAME']]

# API Configuration
TELEGRAM_TOKEN = os.environ['TELEGRAM_TOKEN']
WEBHOOK_SECRET = os.environ['WEBHOOK_SECRET']
USERSBOX_TOKEN = os.environ['USERSBOX_TOKEN']
USERSBOX_BASE_URL = os.environ['USERSBOX_BASE_URL']
CRYPTOBOT_TOKEN = os.environ['CRYPTOBOT_TOKEN']
CRYPTOBOT_BASE_URL = os.environ['CRYPTOBOT_BASE_URL']
ADMIN_USERNAME = os.environ['ADMIN_USERNAME']
REQUIRED_CHANNEL = os.environ['REQUIRED_CHANNEL']
BOT_USERNAME = os.environ.get('BOT_USERNAME', 'search1_test_bot')

# Create the main app
app = FastAPI(title="–£–ó–†–ò - Telegram Bot API")

# Create a router with the /api prefix
api_router = APIRouter(prefix="/api")

# Models
class User(BaseModel):
    telegram_id: int
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    balance: float = 0.0  # –ë–∞–ª–∞–Ω—Å –≤ —Ä—É–±–ª—è—Ö
    subscription_type: Optional[str] = None  # "day", "3days", "month", None
    subscription_expires: Optional[datetime] = None
    daily_searches_used: int = 0  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∏ –∑–∞ –¥–µ–Ω—å
    daily_searches_reset: datetime = Field(default_factory=datetime.utcnow)
    referred_by: Optional[int] = None
    referral_code: str
    total_referrals: int = 0
    created_at: datetime = Field(default_factory=datetime.utcnow)
    is_admin: bool = False
    last_active: datetime = Field(default_factory=datetime.utcnow)
    is_subscribed: bool = False

class Subscription(BaseModel):
    user_id: int
    subscription_type: str  # "day", "3days", "month"
    price: float
    started_at: datetime = Field(default_factory=datetime.utcnow)
    expires_at: datetime
    max_daily_searches: int = 12

class Payment(BaseModel):
    user_id: int
    amount: float
    payment_type: str  # "crypto", "stars", "admin"
    payment_id: Optional[str] = None
    status: str = "pending"  # "pending", "completed", "failed"
    created_at: datetime = Field(default_factory=datetime.utcnow)

class Search(BaseModel):
    user_id: int
    query: str
    search_type: str
    results: Dict[str, Any]
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    cost: float = 25.0
    success: bool = True
    payment_method: str = "balance"  # "balance", "subscription"

class UserState(BaseModel):
    user_id: int
    state: str  # "waiting_custom_amount_stars", "waiting_custom_amount_crypto"
    data: Optional[Dict[str, Any]] = None  # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    created_at: datetime = Field(default_factory=datetime.utcnow)

class Referral(BaseModel):
    referrer_id: int
    referred_id: int
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    confirmed: bool = False  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª (–ø–æ–¥–ø–∏—Å–∞–ª—Å—è –ª–∏ –Ω–∞ –∫–∞–Ω–∞–ª)

# Helper Functions
def generate_referral_code(telegram_id: int) -> str:
    """Generate unique referral code"""
    data = f"{telegram_id}_{secrets.token_hex(8)}"
    return hashlib.md5(data.encode()).hexdigest()[:8]

def detect_search_type(query: str) -> str:
    """Detect search type based on query pattern"""
    query = query.strip()
    
    phone_patterns = [
        r'^\+?[7-8]\d{10}$',
        r'^\+?\d{10,15}$',
        r'^[7-8]\(\d{3}\)\d{3}-?\d{2}-?\d{2}$'
    ]
    
    for pattern in phone_patterns:
        if re.match(pattern, query.replace(' ', '').replace('-', '').replace('(', '').replace(')', '')):
            return "üì± –¢–µ–ª–µ—Ñ–æ–Ω"
    
    if re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', query):
        return "üìß Email"
    
    if re.match(r'^[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•]\d{3}[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•]{2}\d{2,3}$', query.upper().replace(' ', '')):
        return "üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å"
    
    if query.startswith('@') or re.match(r'^[a-zA-Z0-9_]+$', query):
        return "üÜî –ù–∏–∫–Ω–µ–π–º"
    
    if re.match(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', query):
        return "üåê IP-–∞–¥—Ä–µ—Å"
    
    address_keywords = ['—É–ª–∏—Ü–∞', '—É–ª', '–ø—Ä–æ—Å–ø–µ–∫—Ç', '–ø—Ä', '–ø–µ—Ä–µ—É–ª–æ–∫', '–ø–µ—Ä', '–¥–æ–º', '–¥', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–∫–≤']
    if any(keyword in query.lower() for keyword in address_keywords):
        return "üè† –ê–¥—Ä–µ—Å"
    
    words = query.split()
    if 2 <= len(words) <= 3 and all(re.match(r'^[–∞-—è–ê-–Ø—ë–Åa-zA-Z]+$', word) for word in words):
        return "üë§ –§–ò–û"
    
    return "üîç –û–±—â–∏–π –ø–æ–∏—Å–∫"

def create_main_menu():
    """Create main menu keyboard"""
    return {
        "inline_keyboard": [
            [
                {"text": "üîç –ü–æ–∏—Å–∫", "callback_data": "menu_search"},
                {"text": "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "callback_data": "menu_profile"}
            ],
            [
                {"text": "üí∞ –ë–∞–ª–∞–Ω—Å", "callback_data": "menu_balance"},
                {"text": "üõí –¢–∞—Ä–∏—Ñ—ã", "callback_data": "menu_pricing"}
            ],
            [
                {"text": "üîó –†–µ—Ñ–µ—Ä–∞–ª—ã", "callback_data": "menu_referral"},
                {"text": "‚ùì –ü–æ–º–æ—â—å", "callback_data": "menu_help"}
            ],
            [
                {"text": "üìã –ü—Ä–∞–≤–∏–ª–∞", "callback_data": "menu_rules"},
                {"text": "üíé –ö—É–ø–∏—Ç—å –ø–æ–∏—Å–∫ (25‚ÇΩ)", "callback_data": "buy_single_search"}
            ]
        ]
    }

def create_admin_menu():
    """Create admin menu keyboard"""
    return {
        "inline_keyboard": [
            [
                {"text": "üíé –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å", "callback_data": "admin_add_balance"},
                {"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "admin_stats"}
            ],
            [
                {"text": "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "callback_data": "admin_users"},
                {"text": "üí≥ –ü–ª–∞—Ç–µ–∂–∏", "callback_data": "admin_payments"}
            ],
            [
                {"text": "‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back_to_menu"}
            ]
        ]
    }

def create_balance_menu():
    """Create balance menu keyboard"""
    return {
        "inline_keyboard": [
            [
                {"text": "ü§ñ –ö—Ä–∏–ø—Ç–æ–±–æ—Ç", "callback_data": "pay_crypto"},
                {"text": "‚≠ê –ó–≤–µ–∑–¥—ã", "callback_data": "pay_stars"}
            ],
            [
                {"text": "üõí –ö—É–ø–∏—Ç—å –ø–æ–∏—Å–∫ (25‚ÇΩ)", "callback_data": "buy_single_search"}
            ],
            [
                {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_menu"}
            ]
        ]
    }

def create_pricing_menu():
    """Create pricing menu keyboard"""
    return {
        "inline_keyboard": [
            [
                {"text": "üìÖ 1–¥ (149‚ÇΩ)", "callback_data": "buy_day_sub"},
                {"text": "üìÖ 3–¥ (299‚ÇΩ)", "callback_data": "buy_3days_sub"}
            ],
            [
                {"text": "üìÖ 1–º–µ—Å (1700‚ÇΩ)", "callback_data": "buy_month_sub"}
            ],
            [
                {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_menu"}
            ]
        ]
    }

def create_back_keyboard():
    """Create back button keyboard"""
    return {
        "inline_keyboard": [
            [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "callback_data": "back_to_menu"}]
        ]
    }

def create_subscription_keyboard():
    """Create subscription check keyboard"""
    return {
        "inline_keyboard": [
            [
                {"text": "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", "url": "https://t.me/uzrisebya"}
            ],
            [
                {"text": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "check_subscription"}
            ]
        ]
    }

async def check_daily_limit_reset(user: User) -> User:
    """Check if daily search limit should be reset"""
    now = datetime.utcnow()
    if now.date() > user.daily_searches_reset.date():
        await db.users.update_one(
            {"telegram_id": user.telegram_id},
            {
                "$set": {
                    "daily_searches_used": 0,
                    "daily_searches_reset": now
                }
            }
        )
        user.daily_searches_used = 0
        user.daily_searches_reset = now
    return user

async def has_active_subscription(user: User) -> bool:
    """Check if user has active subscription"""
    if not user.subscription_expires:
        return False
    return datetime.utcnow() < user.subscription_expires

async def can_search(user: User) -> tuple[bool, str]:
    """Check if user can perform search"""
    # Admin always can search
    if user.is_admin:
        return True, ""
    
    # Check subscription first
    if await has_active_subscription(user):
        user = await check_daily_limit_reset(user)
        if user.daily_searches_used >= 12:
            return False, "–ø—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–∫–∏ (12 –ø–æ–∏—Å–∫–æ–≤)"
        return True, "subscription"
    
    # Check balance for single search
    if user.balance >= 25.0:
        return True, "balance"
    
    return False, "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"

async def usersbox_request(endpoint: str, params: Dict = None) -> Dict:
    """Make request to usersbox API"""
    headers = {"Authorization": USERSBOX_TOKEN}
    url = f"{USERSBOX_BASE_URL}{endpoint}"
    
    try:
        response = requests.get(url, headers=headers, params=params or {}, timeout=30)
        return response.json()
    except Exception as e:
        logging.error(f"Usersbox API error: {e}")
        return {"status": "error", "error": {"message": str(e)}}

def format_search_results(results: Dict[str, Any], query: str, search_type: str) -> str:
    """Format usersbox API results for Telegram"""
    if results.get('status') == 'error':
        return f"‚ùå *–û—à–∏–±–∫–∞:* {results.get('error', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

    data = results.get('data', {})
    total_count = data.get('count', 0)
    
    if total_count == 0:
        return f"üîç *–ü–æ–∏—Å–∫:* `{query}`\n{search_type}\n\n‚ùå *–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*\n\nüí° *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞*"
    
    formatted_text = f"üéØ *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê*\n\n"
    formatted_text += f"üîç *–ó–∞–ø—Ä–æ—Å:* `{query}`\n"
    formatted_text += f"üìÇ *–¢–∏–ø:* {search_type}\n"
    formatted_text += f"üìä *–ù–∞–π–¥–µ–Ω–æ:* {total_count} –∑–∞–ø–∏—Å–µ–π\n\n"

    if 'items' in data and isinstance(data['items'], list):
        formatted_text += "üìã *–î–ê–ù–ù–´–ï –ò–ó –ë–ê–ó:*\n\n"
        
        for i, source_data in enumerate(data['items'][:5], 1):
            if 'source' in source_data and 'hits' in source_data:
                source = source_data['source']
                hits = source_data['hits']
                hits_count = hits.get('hitsCount', hits.get('count', 0))
                
                db_names = {
                    'yandex': 'üü° –Ø–Ω–¥–µ–∫—Å',
                    'avito': 'üü¢ –ê–≤–∏—Ç–æ',
                    'vk': 'üîµ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ',
                    'ok': 'üü† –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏',
                    'delivery_club': 'üçï Delivery Club',
                    'cdek': 'üì¶ –°–î–≠–ö'
                }
                
                db_display = db_names.get(source.get('database', ''), f"üìä {source.get('database', 'N/A')}")
                
                formatted_text += f"*{i}. {db_display}*\n"
                formatted_text += f"üìÅ –ë–∞–∑–∞: {source.get('collection', 'N/A')}\n"
                formatted_text += f"üî¢ –ó–∞–ø–∏—Å–µ–π: {hits_count}\n"

                if 'items' in hits and hits['items']:
                    formatted_text += "üíæ *–î–∞–Ω–Ω—ã–µ:*\n"
                    for item in hits['items'][:2]:
                        for key, value in item.items():
                            if key.startswith('_'):
                                continue
                            
                            if key in ['phone', '—Ç–µ–ª–µ—Ñ–æ–Ω', 'tel', 'mobile']:
                                formatted_text += f"üìû {value}\n"
                            elif key in ['email', '–ø–æ—á—Ç–∞', 'mail', 'e_mail']:
                                formatted_text += f"üìß {value}\n"
                            elif key in ['full_name', 'name', '–∏–º—è', '—Ñ–∏–æ', 'first_name', 'last_name']:
                                formatted_text += f"üë§ {value}\n"
                            elif key in ['birth_date', 'birthday', '–¥–∞—Ç–∞_—Ä–æ–∂–¥–µ–Ω–∏—è', 'bdate']:
                                formatted_text += f"üéÇ {value}\n"
                            elif key in ['address', '–∞–¥—Ä–µ—Å', 'city', '–≥–æ—Ä–æ–¥']:
                                formatted_text += f"üè† {value}\n"
                            elif key in ['sex', 'gender', '–ø–æ–ª']:
                                gender_map = {'1': '–ñ', '2': '–ú', 'male': '–ú', 'female': '–ñ'}
                                formatted_text += f"‚ö• {gender_map.get(str(value), value)}\n"
                
                formatted_text += "\n"

    formatted_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    formatted_text += "üîí *–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ"
    
    return formatted_text

async def check_subscription(user_id: int) -> bool:
    """Check if user is subscribed to required channel"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getChatMember"
        params = {
            "chat_id": REQUIRED_CHANNEL,
            "user_id": user_id
        }
        
        response = requests.get(url, params=params, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                status = data.get('result', {}).get('status')
                return status in ['member', 'administrator', 'creator']
        
        return False
    except Exception as e:
        logging.error(f"Subscription check error: {e}")
        return False

async def send_telegram_message(chat_id: int, text: str, parse_mode: str = "Markdown", reply_markup: dict = None) -> bool:
    """Send message to Telegram user"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode
    }
    
    if reply_markup:
        payload["reply_markup"] = reply_markup
    
    try:
        response = requests.post(url, json=payload, timeout=10)
        return response.status_code == 200
    except Exception as e:
        logging.error(f"Failed to send Telegram message: {e}")
        return False

async def get_or_create_user(telegram_id: int, username: str = None, first_name: str = None, last_name: str = None, referral_code: str = None) -> tuple[User, bool]:
    """Get existing user or create new one. Returns (user, is_new_user)"""
    user_data = await db.users.find_one({"telegram_id": telegram_id})
    
    if user_data:
        await db.users.update_one(
            {"telegram_id": telegram_id},
            {
                "$set": {
                    "last_active": datetime.utcnow(),
                    "username": username,
                    "first_name": first_name,
                    "last_name": last_name
                }
            }
        )
        return User(**user_data), False
    else:
        referral_code_generated = generate_referral_code(telegram_id)
        is_admin = username == ADMIN_USERNAME if username else False
        
        user = User(
            telegram_id=telegram_id,
            username=username,
            first_name=first_name,
            last_name=last_name,
            referral_code=referral_code_generated,
            is_admin=is_admin,
            balance=0.0  # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –¥–µ–Ω–µ–≥
        )
        
        await db.users.insert_one(user.dict())
        
        # Process referral for new user
        if referral_code:
            await process_referral(telegram_id, referral_code)
        
        return user, True

# API Routes
@api_router.get("/")
async def root():
    return {"message": "–£–ó–†–ò - Telegram Bot API", "status": "running"}

@api_router.post("/webhook/{secret}")
async def telegram_webhook(secret: str, request: Request):
    """Handle Telegram webhook"""
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="Invalid webhook secret")
    
    try:
        update_data = await request.json()
        await handle_telegram_update(update_data)
        return {"status": "ok"}
    except Exception as e:
        logging.error(f"Webhook processing failed: {e}")
        raise HTTPException(status_code=500, detail=f"Webhook processing failed: {str(e)}")

async def handle_callback_query(callback_query: Dict[str, Any]):
    """Handle callback queries from inline keyboard buttons"""
    chat_id = callback_query.get('message', {}).get('chat', {}).get('id')
    user_id = callback_query.get('from', {}).get('id')
    data = callback_query.get('data')
    callback_query_id = callback_query.get('id')
    
    # Answer callback query
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/answerCallbackQuery"
        requests.post(url, json={"callback_query_id": callback_query_id}, timeout=5)
    except:
        pass
    
    user, is_new_user = await get_or_create_user(
        telegram_id=user_id,
        username=callback_query.get('from', {}).get('username'),
        first_name=callback_query.get('from', {}).get('first_name'),
        last_name=callback_query.get('from', {}).get('last_name')
    )
    
    # Handle different callback data
    if data == "check_subscription":
        await handle_subscription_check(chat_id, user_id)
    elif data == "back_to_menu":
        await show_main_menu(chat_id, user)
    elif data == "menu_search":
        await show_search_menu(chat_id, user)
    elif data == "menu_profile":
        await show_profile_menu(chat_id, user)
    elif data == "menu_balance":
        await show_balance_menu(chat_id, user)
    elif data == "menu_pricing":
        await show_pricing_menu(chat_id, user)
    elif data == "menu_referral":
        await show_referral_menu(chat_id, user)
    elif data == "menu_help":
        await show_help_menu(chat_id, user)
    elif data == "menu_rules":
        await show_rules_menu(chat_id, user)
    elif data.startswith("admin_") and user.is_admin:
        await handle_admin_callback(chat_id, user, data)
    elif data.startswith("pay_"):
        await handle_payment_callback(chat_id, user, data)
    elif data.startswith("buy_"):
        await handle_purchase_callback(chat_id, user, data)
    elif data.startswith("crypto_"):
        if "_btc" in data or "_eth" in data or "_usdt" in data or "_ltc" in data:
            if data.count("_") >= 3:  # crypto_btc_100 format
                parts = data.split("_")
                crypto_type = parts[1]
                amount = parts[2]
                if amount == "custom":
                    await handle_crypto_custom_amount(chat_id, user, crypto_type)
                else:
                    await handle_crypto_payment_amount(chat_id, user, crypto_type, amount)
            else:  # crypto_btc format
                crypto_type = data.split("_")[1]
                await handle_crypto_payment(chat_id, user, crypto_type)
    elif data.startswith("stars_"):
        amount = data.split("_")[1]
        if amount == "custom":
            await handle_stars_custom_amount(chat_id, user)
        else:
            await handle_stars_payment(chat_id, user, amount)

async def handle_subscription_check(chat_id: int, user_id: int):
    """Handle subscription check"""
    is_subscribed = await check_subscription(user_id)
    if is_subscribed:
        await db.users.update_one(
            {"telegram_id": user_id},
            {"$set": {"is_subscribed": True}}
        )
        
        # Confirm referral if exists
        await confirm_referral(user_id)
        
        await send_telegram_message(
            chat_id,
            "‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\nüéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º!"
        )
        
        # Get user and show main menu
        user_data = await db.users.find_one({"telegram_id": user_id})
        if user_data:
            user = User(**user_data)
            await show_main_menu(chat_id, user)
    else:
        await send_telegram_message(
            chat_id,
            "‚ùå *–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*\n\nüì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @uzrisebya –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
            reply_markup=create_subscription_keyboard()
        )

async def confirm_referral(user_id: int):
    """Confirm referral when user subscribes to channel"""
    try:
        referral = await db.referrals.find_one({"referred_id": user_id, "confirmed": False})
        if referral:
            # Mark referral as confirmed
            await db.referrals.update_one(
                {"_id": referral["_id"]},
                {"$set": {"confirmed": True}}
            )
            
            # Give 1 search attempt (25‚ÇΩ equivalent) to referrer
            await db.users.update_one(
                {"telegram_id": referral["referrer_id"]},
                {"$inc": {"balance": 25.0}}
            )
            
            # Notify referrer
            await send_telegram_message(
                referral["referrer_id"],
                f"üéâ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!*\n\nüîç –ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∞ 1 –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞\nüí∞ (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç 25‚ÇΩ)"
            )
            
            logging.info(f"Referral confirmed: referrer {referral['referrer_id']}, referred {user_id}")
    except Exception as e:
        logging.error(f"Error confirming referral: {e}")

async def show_main_menu(chat_id: int, user: User):
    """Show main menu"""
    welcome_text = f"üéØ *–°–ï–†–í–ò–° –£–ó–†–ò - –ü–û–ò–°–ö –î–ê–ù–ù–´–•*\n\n"
    welcome_text += f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n\n"
    
    # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞
    welcome_text += f"üîç *–ß–¢–û –£–ú–ï–ï–¢ –ù–ê–®–ò–• –ë–û–¢:*\n\n"
    
    welcome_text += f"üìä *–ü–û–ò–°–ö –ü–û 1000+ –ë–ê–ó–ê–ú –î–ê–ù–ù–´–•:*\n"
    welcome_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã: +79123456789\n"
    welcome_text += f"üìß Email: user@mail.ru\n"
    welcome_text += f"üë§ –§–ò–û: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ –°–µ—Ä–≥–µ–µ–≤–∏—á\n"
    welcome_text += f"üöó –ê–≤—Ç–æ–Ω–æ–º–µ—Ä–∞: –ê123–í–°777\n"
    welcome_text += f"üÜî –ù–∏–∫–Ω–µ–π–º—ã: @username\n"
    welcome_text += f"üåê IP-–∞–¥—Ä–µ—Å–∞: 192.168.1.1\n"
    welcome_text += f"üè† –ê–¥—Ä–µ—Å–∞ –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è\n\n"
    
    welcome_text += f"üóÑÔ∏è *–ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:*\n"
    welcome_text += f"üü° –Ø–Ω–¥–µ–∫—Å (–ï–¥–∞, –¢–∞–∫—Å–∏, –ö–∞—Ä—Ç—ã)\n"
    welcome_text += f"üü¢ –ê–≤–∏—Ç–æ (–æ–±—ä—è–≤–ª–µ–Ω–∏—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)\n"
    welcome_text += f"üîµ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ (–ø—Ä–æ—Ñ–∏–ª–∏)\n"
    welcome_text += f"üü† –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏\n"
    welcome_text += f"üì¶ –°–î–≠–ö (–¥–æ—Å—Ç–∞–≤–∫–∞)\n"
    welcome_text += f"üçï Delivery Club –∏ –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ\n\n"
    
    # –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –ø—Ä–æ–±–∏–≤–µ
    welcome_text += f"üéÅ *–ë–ï–°–ü–õ–ê–¢–ù–´–ï –ü–†–û–ë–ò–í–´:*\n"
    welcome_text += f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ 1 –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –ø—Ä–æ–±–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö!\n\n"
    
    # Show subscription status
    if await has_active_subscription(user):
        expires = user.subscription_expires.strftime('%d.%m.%Y %H:%M')
        welcome_text += f"‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:* {expires}\n"
        user = await check_daily_limit_reset(user)
        welcome_text += f"üîç *–ü–æ–∏—Å–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è:* {user.daily_searches_used}/12\n\n"
    else:
        welcome_text += f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {user.balance:.2f} ‚ÇΩ\n"
        searches_available = int(user.balance // 25)
        welcome_text += f"üîç *–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–∏—Å–∫–æ–≤:* {searches_available}\n\n"
    
    welcome_text += f"üë• *–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:* {user.total_referrals}\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –±–µ–∑ —Ü–µ–Ω
    welcome_text += f"üí≥ *–î–û–°–¢–£–ü–ù–´–ï –¢–ê–†–ò–§–´:*\n"
    welcome_text += f"‚Ä¢ –†–∞–∑–æ–≤—ã–µ –ø–æ–∏—Å–∫–∏\n"
    welcome_text += f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –¥–µ–Ω—å\n"
    welcome_text += f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –¥–Ω—è\n"
    welcome_text += f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü\n\n"
    
    welcome_text += f"üîç *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*"
    
    if user.is_admin:
        # Show admin menu for eriksson_sop
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "üîç –ü–æ–∏—Å–∫", "callback_data": "menu_search"},
                    {"text": "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "callback_data": "menu_profile"}
                ],
                [
                    {"text": "üí∞ –ë–∞–ª–∞–Ω—Å", "callback_data": "menu_balance"},
                    {"text": "üõí –¢–∞—Ä–∏—Ñ—ã", "callback_data": "menu_pricing"}
                ],
                [
                    {"text": "üîó –†–µ—Ñ–µ—Ä–∞–ª—ã", "callback_data": "menu_referral"},
                    {"text": "‚ùì –ü–æ–º–æ—â—å", "callback_data": "menu_help"}
                ],
                [
                    {"text": "üìã –ü—Ä–∞–≤–∏–ª–∞", "callback_data": "menu_rules"},
                    {"text": "üíé –ö—É–ø–∏—Ç—å –ø–æ–∏—Å–∫ (25‚ÇΩ)", "callback_data": "buy_single_search"}
                ],
                [
                    {"text": "üëë –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨", "callback_data": "admin_panel"}
                ]
            ]
        }
    else:
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "üîç –ü–æ–∏—Å–∫", "callback_data": "menu_search"},
                    {"text": "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "callback_data": "menu_profile"}
                ],
                [
                    {"text": "üí∞ –ë–∞–ª–∞–Ω—Å", "callback_data": "menu_balance"},
                    {"text": "üõí –¢–∞—Ä–∏—Ñ—ã", "callback_data": "menu_pricing"}
                ],
                [
                    {"text": "üîó –†–µ—Ñ–µ—Ä–∞–ª—ã", "callback_data": "menu_referral"},
                    {"text": "‚ùì –ü–æ–º–æ—â—å", "callback_data": "menu_help"}
                ],
                [
                    {"text": "üìã –ü—Ä–∞–≤–∏–ª–∞", "callback_data": "menu_rules"},
                    {"text": "üíé –ö—É–ø–∏—Ç—å –ø–æ–∏—Å–∫ (25‚ÇΩ)", "callback_data": "buy_single_search"}
                ]
            ]
        }
    
    await send_telegram_message(chat_id, welcome_text, reply_markup=keyboard)

async def show_search_menu(chat_id: int, user: User):
    """Show search menu"""
    if not user.is_admin:
        is_subscribed = await check_subscription(user.telegram_id)
        if not is_subscribed:
            await send_telegram_message(
                chat_id,
                "üîí *–î–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞!*\n\nüì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @uzrisebya",
                reply_markup=create_subscription_keyboard()
            )
            return
    
    can_search_result, payment_method = await can_search(user)
    
    if not can_search_result and not user.is_admin:
        if "–ø—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç" in payment_method:
            search_text = f"‚è∞ *–î–ù–ï–í–ù–û–ô –õ–ò–ú–ò–¢ –ò–°–ß–ï–†–ü–ê–ù*\n\n"
            search_text += f"üìÖ –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ 12 –ø–æ–∏—Å–∫–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            search_text += f"üïí –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –∫—É–ø–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–∏—Å–∫–∏"
        else:
            search_text = f"üí∞ *–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í*\n\n"
            search_text += f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f} ‚ÇΩ\n"
            search_text += f"üíé –ù—É–∂–Ω–æ: 25 ‚ÇΩ –∑–∞ –ø–æ–∏—Å–∫\n\n"
            search_text += f"üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É"
        
        await send_telegram_message(chat_id, search_text, reply_markup=create_back_keyboard())
        return
    
    search_text = f"üîç *–ü–û–ò–°–ö –ü–û –ë–ê–ó–ê–ú –î–ê–ù–ù–´–•*\n\n"
    
    if user.is_admin:
        search_text += f"üëë *–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n"
    elif await has_active_subscription(user):
        user = await check_daily_limit_reset(user)
        search_text += f"‚úÖ *–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞*\n"
        search_text += f"üîç *–ü–æ–∏—Å–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è:* {user.daily_searches_used}/12\n"
    else:
        search_text += f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {user.balance:.2f} ‚ÇΩ\n"
        searches_available = int(user.balance // 25)
        search_text += f"üîç *–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–∏—Å–∫–æ–≤:* {searches_available}\n"
    
    search_text += f"\nüìù *–¢–ò–ü–´ –ü–û–ò–°–ö–ê:*\n"
    search_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: +79123456789, 89123456789\n"
    search_text += f"üìß Email: user@mail.ru, admin@site.com\n"
    search_text += f"üë§ –§–ò–û: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞\n"
    search_text += f"üöó –ê–≤—Ç–æ: –ê123–í–°777, –í456–û–†199\n"
    search_text += f"üÜî –ù–∏–∫–Ω–µ–π–º: @username, nickname\n"
    search_text += f"üåê IP: 192.168.1.1, 8.8.8.8\n"
    search_text += f"üè† –ê–¥—Ä–µ—Å: —É–ª–∏—Ü–∞ –õ–µ–Ω–∏–Ω–∞ –¥–æ–º 5\n\n"
    
    search_text += f"üóÑÔ∏è *–ò–°–¢–û–ß–ù–ò–ö–ò (1000+ –ë–ê–ó):*\n"
    search_text += f"üü° –Ø–Ω–¥–µ–∫—Å ‚Ä¢ üü¢ –ê–≤–∏—Ç–æ ‚Ä¢ üîµ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ\n"
    search_text += f"üü† –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ ‚Ä¢ üì¶ –°–î–≠–ö ‚Ä¢ üçï Delivery Club\n"
    search_text += f"üìä –ò –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã\n\n"
    
    search_text += f"‚û°Ô∏è *–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞*"
    
    await send_telegram_message(chat_id, search_text, reply_markup=create_back_keyboard())

async def show_profile_menu(chat_id: int, user: User):
    """Show profile menu"""
    total_searches = await db.searches.count_documents({"user_id": user.telegram_id})
    successful_searches = await db.searches.count_documents({"user_id": user.telegram_id, "success": True})
    
    profile_text = f"üë§ *–í–ê–® –ü–†–û–§–ò–õ–¨*\n\n"
    profile_text += f"üÜî *ID:* `{user.telegram_id}`\n"
    profile_text += f"üë§ *–ò–º—è:* {user.first_name or 'N/A'}\n"
    profile_text += f"üîó *Username:* @{user.username or 'N/A'}\n\n"
    
    profile_text += f"üí∞ *–§–ò–ù–ê–ù–°–´:*\n"
    profile_text += f"üí≥ –ë–∞–ª–∞–Ω—Å: {user.balance:.2f} ‚ÇΩ\n"
    
    if await has_active_subscription(user):
        sub_type_names = {"day": "1 –¥–µ–Ω—å", "3days": "3 –¥–Ω—è", "month": "1 –º–µ—Å—è—Ü"}
        sub_name = sub_type_names.get(user.subscription_type, user.subscription_type)
        expires = user.subscription_expires.strftime('%d.%m.%Y %H:%M')
        profile_text += f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞: {sub_name} –¥–æ {expires}\n"
        user = await check_daily_limit_reset(user)
        profile_text += f"üîç –ü–æ–∏—Å–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {user.daily_searches_used}/12\n"
    else:
        profile_text += f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞: –ù–µ—Ç\n"
    
    profile_text += f"\nüìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê:*\n"
    profile_text += f"üîç –ü–æ–∏—Å–∫–æ–≤: {total_searches}\n"
    profile_text += f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_searches}\n"
    profile_text += f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user.total_referrals}\n"
    profile_text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}\n\n"
    
    if user.is_admin:
        profile_text += f"üëë *–°—Ç–∞—Ç—É—Å:* –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†\n"
    
    await send_telegram_message(chat_id, profile_text, reply_markup=create_back_keyboard())

async def show_balance_menu(chat_id: int, user: User):
    """Show balance menu"""
    balance_text = f"üí∞ *–í–ê–® –ë–ê–õ–ê–ù–°*\n\n"
    balance_text += f"üí≥ *–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* {user.balance:.2f} ‚ÇΩ\n"
    
    searches_available = int(user.balance // 25)
    balance_text += f"üîç *–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–∏—Å–∫–æ–≤:* {searches_available}\n\n"
    
    balance_text += f"üí° *–°–ü–û–°–û–ë–´ –ü–û–ü–û–õ–ù–ï–ù–ò–Ø:*\n"
    balance_text += f"ü§ñ –ö—Ä–∏–ø—Ç–æ–±–æ—Ç - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
    balance_text += f"‚≠ê –ó–≤–µ–∑–¥—ã Telegram - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ\n\n"
    balance_text += f"üíé *–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:* 100 ‚ÇΩ\n"
    balance_text += f"üîç *–û–¥–∏–Ω –ø–æ–∏—Å–∫:* 25 ‚ÇΩ\n\n"
    balance_text += f"üíº *–ò–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏!*"
    
    await send_telegram_message(chat_id, balance_text, reply_markup=create_balance_menu())

async def show_pricing_menu(chat_id: int, user: User):
    """Show pricing menu"""
    pricing_text = f"üõí *–¢–ê–†–ò–§–´ –ò –ü–û–î–ü–ò–°–ö–ò*\n\n"
    
    pricing_text += f"üíé *–†–ê–ó–û–í–´–ï –ü–û–ò–°–ö–ò:*\n"
    pricing_text += f"üîç 1 –ø–æ–∏—Å–∫ = 25 ‚ÇΩ\n"
    pricing_text += f"üí° –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n\n"
    
    pricing_text += f"‚≠ê *–í–´–ì–û–î–ù–´–ï –ü–û–î–ü–ò–°–ö–ò*:\n\n"
    
    pricing_text += f"üìÖ *1 –î–ï–ù–¨ - 149 ‚ÇΩ*\n"
    pricing_text += f"‚Ä¢ –î–æ 12 –ø–æ–∏—Å–∫–æ–≤ –≤ –¥–µ–Ω—å\n"
    pricing_text += f"‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è: 151 ‚ÇΩ (–ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —Ä–∞–∑–æ–≤—ã–º–∏)\n"
    pricing_text += f"‚Ä¢ –¶–µ–Ω–∞ –∑–∞ –ø–æ–∏—Å–∫: ~12‚ÇΩ\n\n"
    
    pricing_text += f"üìÖ *3 –î–ù–Ø - 299 ‚ÇΩ* üî•\n"
    pricing_text += f"‚Ä¢ –î–æ 36 –ø–æ–∏—Å–∫–æ–≤ –∑–∞ 3 –¥–Ω—è\n"
    pricing_text += f"‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è: 601 ‚ÇΩ\n"
    pricing_text += f"‚Ä¢ –¶–µ–Ω–∞ –∑–∞ –ø–æ–∏—Å–∫: ~8‚ÇΩ\n\n"
    
    pricing_text += f"üìÖ *1 –ú–ï–°–Ø–¶ - 1700 ‚ÇΩ* üíé\n"
    pricing_text += f"‚Ä¢ –î–æ 360 –ø–æ–∏—Å–∫–æ–≤ –∑–∞ –º–µ—Å—è—Ü\n"
    pricing_text += f"‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è: 7300 ‚ÇΩ\n"
    pricing_text += f"‚Ä¢ –¶–µ–Ω–∞ –∑–∞ –ø–æ–∏—Å–∫: ~5‚ÇΩ\n\n"
    
    pricing_text += f"üéÅ *–ë–ï–°–ü–õ–ê–¢–ù–û:*\n"
    pricing_text += f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–∏—Å–∫–∏!\n"
    pricing_text += f"‚Ä¢ 1 –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª = 1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞\n\n"
    
    pricing_text += f"üí° *–ß–µ–º –±–æ–ª—å—à–µ —Ç–∞—Ä–∏—Ñ, —Ç–µ–º –±–æ–ª—å—à–µ —ç–∫–æ–Ω–æ–º–∏—è!*"
    
    await send_telegram_message(chat_id, pricing_text, reply_markup=create_pricing_menu())

async def show_referral_menu(chat_id: int, user: User):
    """Show referral menu"""
    referral_link = f"https://t.me/{BOT_USERNAME}?start={user.referral_code}"
    confirmed_referrals = await db.referrals.count_documents({"referrer_id": user.telegram_id, "confirmed": True})
    
    referral_text = f"üîó *–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê*\n\n"
    referral_text += f"üîç *–ó–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:* +1 –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞\n"
    referral_text += f"üìã *–£—Å–ª–æ–≤–∏–µ:* —Ä–µ—Ñ–µ—Ä–∞–ª –¥–æ–ª–∂–µ–Ω –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ @uzrisebya\n\n"
    
    referral_text += f"üìä *–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:*\n"
    referral_text += f"üë• –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user.total_referrals}\n"
    referral_text += f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {confirmed_referrals}\n"
    referral_text += f"üîç –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {confirmed_referrals}\n\n"
    
    referral_text += f"üîó *–í–ê–®–ê –°–°–´–õ–ö–ê:*\n"
    referral_text += f"`{referral_link}`\n\n"
    
    referral_text += f"üì± *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
    referral_text += f"1. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π\n"
    referral_text += f"2. –î—Ä—É–≥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è\n"
    referral_text += f"3. –î—Ä—É–≥ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ @uzrisebya\n"
    referral_text += f"4. –í–∞–º –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 1 –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞"
    
    await send_telegram_message(chat_id, referral_text, reply_markup=create_back_keyboard())

async def show_help_menu(chat_id: int, user: User):
    """Show help menu"""
    help_text = f"‚ùì *–°–ü–†–ê–í–ö–ê –ò –ü–û–î–î–ï–†–ñ–ö–ê*\n\n"
    help_text += f"üéØ *–û –°–ï–†–í–ò–°–ï:*\n"
    help_text += f"–£–ó–†–ò –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—é–¥—è—Ö –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.\n\n"
    
    help_text += f"üí∞ *–¢–ê–†–ò–§–´:*\n"
    help_text += f"üîç –†–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫: 25 ‚ÇΩ\n"
    help_text += f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∏: –æ—Ç 149 ‚ÇΩ/–¥–µ–Ω—å\n\n"
    
    help_text += f"üí≥ *–ü–û–ü–û–õ–ù–ï–ù–ò–ï:*\n"
    help_text += f"ü§ñ –ö—Ä–∏–ø—Ç–æ–±–æ—Ç\n"
    help_text += f"‚≠ê –ó–≤–µ–∑–¥—ã Telegram\n"
    help_text += f"üíé –ú–∏–Ω–∏–º—É–º: 100 ‚ÇΩ\n\n"
    
    help_text += f"üîó *–†–ï–§–ï–†–ê–õ–´:*\n"
    help_text += f"üîç 1 –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n\n"
    
    help_text += f"üìû *–ü–û–î–î–ï–†–ñ–ö–ê:*\n"
    help_text += f"@Sigicara - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
    
    help_text += f"‚öñÔ∏è *–í–ê–ñ–ù–û:*\n"
    help_text += f"–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–∑—É—á–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞"
    
    await send_telegram_message(chat_id, help_text, reply_markup=create_back_keyboard())

async def show_rules_menu(chat_id: int, user: User):
    """Show rules menu"""
    rules_text = f"üìã *–ü–†–ê–í–ò–õ–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –°–ï–†–í–ò–°–ê*\n\n"
    
    rules_text += f"*1. –°–û–ì–õ–ê–°–ò–ï –° –ü–†–ê–í–ò–õ–ê–ú–ò*\n"
    rules_text += f"–ò—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–π –±–æ—Ç, –≤—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–µ—Ä–≤–∏—Å–∞.\n\n"
    
    rules_text += f"*2. –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –°–ï–†–í–ò–°–ê*\n"
    rules_text += f"‚Ä¢ –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö\n"
    rules_text += f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–µ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
    rules_text += f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–ª–µ–¥–∞\n\n"
    
    rules_text += f"*3. –ó–ê–ü–†–ï–©–ê–ï–¢–°–Ø*\n"
    rules_text += f"‚Ä¢ –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞\n"
    rules_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞\n"
    rules_text += f"‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–æ–≤ –†–§\n"
    rules_text += f"‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
    rules_text += f"‚Ä¢ –ü—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ —à–∞–Ω—Ç–∞–∂\n\n"
    
    rules_text += f"*4. –¢–ê–†–ò–§–ò–ö–ê–¶–ò–Ø*\n"
    rules_text += f"‚Ä¢ –†–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫: 25 ‚ÇΩ\n"
    rules_text += f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∏ —Å –ª–∏–º–∏—Ç–æ–º 12 –ø–æ–∏—Å–∫–æ–≤/–¥–µ–Ω—å\n"
    rules_text += f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 100 ‚ÇΩ\n"
    rules_text += f"‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω\n\n"
    
    rules_text += f"*5. –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–¨*\n"
    rules_text += f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n"
    rules_text += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è\n"
    rules_text += f"‚Ä¢ –ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
    
    rules_text += f"*6. –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê*\n"
    rules_text += f"@Sigicara - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
    
    rules_text += f"‚öñÔ∏è *–ò—Å–ø–æ–ª—å–∑—É—è —Å–µ—Ä–≤–∏—Å, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.*"
    
    await send_telegram_message(chat_id, rules_text, reply_markup=create_back_keyboard())

async def handle_admin_callback(chat_id: int, user: User, data: str):
    """Handle admin callbacks"""
    if data == "admin_panel":
        admin_text = f"üëë *–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨*\n\n"
        admin_text += f"üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º –£–ó–†–ò\n\n"
        admin_text += f"üíé *–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å* - –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        admin_text += f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞\n"
        admin_text += f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏* - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        admin_text += f"üí≥ *–ü–ª–∞—Ç–µ–∂–∏* - –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
        
        await send_telegram_message(chat_id, admin_text, reply_markup=create_admin_menu())
    
    elif data == "admin_add_balance":
        await send_telegram_message(
            chat_id,
            "üíé *–ù–ê–ß–ò–°–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`ID –°–£–ú–ú–ê`\n\n–ü—Ä–∏–º–µ—Ä: `123456789 100`",
            reply_markup=create_back_keyboard()
        )
    
    elif data == "admin_stats":
        total_users = await db.users.count_documents({})
        total_searches = await db.searches.count_documents({})
        total_revenue = await db.searches.aggregate([
            {"$group": {"_id": None, "total": {"$sum": "$cost"}}}
        ]).to_list(1)
        active_subs = await db.users.count_documents({"subscription_expires": {"$gt": datetime.utcnow()}})
        
        stats_text = f"üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–†–í–ò–°–ê*\n\n"
        stats_text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        stats_text += f"üîç –ü–æ–∏—Å–∫–æ–≤: {total_searches}\n"
        stats_text += f"‚≠ê –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subs}\n"
        revenue = total_revenue[0]['total'] if total_revenue else 0
        stats_text += f"üí∞ –í—ã—Ä—É—á–∫–∞: {revenue:.2f} ‚ÇΩ"
        
        await send_telegram_message(chat_id, stats_text, reply_markup=create_admin_menu())

async def handle_payment_callback(chat_id: int, user: User, data: str):
    """Handle payment callbacks"""
    if data == "pay_crypto":
        # –ö—Ä–∏–ø—Ç–æ–±–æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        crypto_text = f"ü§ñ *–ü–û–ü–û–õ–ù–ï–ù–ò–ï –ß–ï–†–ï–ó –ö–†–ò–ü–¢–û–ë–û–¢*\n\n"
        crypto_text += f"üí∞ *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:*\n"
        crypto_text += f"‚Çø Bitcoin (BTC)\n"
        crypto_text += f"üíé Ethereum (ETH)\n"  
        crypto_text += f"üí∞ USDT (TRC-20/ERC-20)\n"
        crypto_text += f"üî∏ Litecoin (LTC)\n\n"
        crypto_text += f"üìã *–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å:*\n"
        crypto_text += f"1. –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É\n"
        crypto_text += f"2. –ü–æ–ª—É—á–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞\n"
        crypto_text += f"3. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞\n"
        crypto_text += f"4. –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        crypto_text += f"‚ö° *–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:* 100 ‚ÇΩ\n"
        crypto_text += f"üöÄ *–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ:* 1-30 –º–∏–Ω—É—Ç\n\n"
        crypto_text += f"üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* @Sigicara"
        
        crypto_keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚Çø Bitcoin", "callback_data": "crypto_btc"},
                    {"text": "üíé Ethereum", "callback_data": "crypto_eth"}
                ],
                [
                    {"text": "üí∞ USDT", "callback_data": "crypto_usdt"},
                    {"text": "üî∏ Litecoin", "callback_data": "crypto_ltc"}
                ],
                [
                    {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": "menu_balance"}
                ]
            ]
        }
        
        await send_telegram_message(chat_id, crypto_text, reply_markup=crypto_keyboard)
    
    elif data == "pay_stars":
        # Telegram Stars –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        stars_text = f"‚≠ê *–ü–û–ü–û–õ–ù–ï–ù–ò–ï –ó–í–ï–ó–î–ê–ú–ò TELEGRAM*\n\n"
        stars_text += f"üí´ *–ë—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ!*\n"
        stars_text += f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–≤–µ–∑–¥—ã Telegram –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞\n\n"
        stars_text += f"üí∞ *–ö—É—Ä—Å –æ–±–º–µ–Ω–∞:*\n"
        stars_text += f"1 ‚≠ê = 2 ‚ÇΩ\n\n"
        stars_text += f"üéØ *–í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:*\n\n"
        
        stars_keyboard = {
            "inline_keyboard": [
                [
                    {"text": "50‚≠ê = 100‚ÇΩ", "callback_data": "stars_100"},
                    {"text": "125‚≠ê = 250‚ÇΩ", "callback_data": "stars_250"}
                ],
                [
                    {"text": "250‚≠ê = 500‚ÇΩ", "callback_data": "stars_500"},
                    {"text": "500‚≠ê = 1000‚ÇΩ", "callback_data": "stars_1000"}
                ],
                [
                    {"text": "1000‚≠ê = 2000‚ÇΩ", "callback_data": "stars_2000"}
                ],
                [
                    {"text": "üí∞ –°–≤–æ—è —Å—É–º–º–∞", "callback_data": "stars_custom"}
                ],
                [
                    {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": "menu_balance"}
                ]
            ]
        }
        
        await send_telegram_message(chat_id, stars_text, reply_markup=stars_keyboard)
    
    elif data == "buy_single_search":
        if user.balance >= 25.0:
            await send_telegram_message(
                chat_id,
                "‚úÖ *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞*\n\nüîç –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ü–æ–∏—Å–∫'",
                reply_markup=create_back_keyboard()
            )
        else:
            needed = 25.0 - user.balance
            await send_telegram_message(
                chat_id,
                f"üí≥ *–ü–û–ö–£–ü–ö–ê –ü–û–ò–°–ö–ê*\n\nüíé –ù—É–∂–Ω–æ –¥–æ–ø–ª–∞—Ç–∏—Ç—å: {needed:.2f} ‚ÇΩ\n\nüí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É –æ—Ç 100 ‚ÇΩ",
                reply_markup=create_balance_menu()
            )

async def handle_crypto_payment_amount(chat_id: int, user: User, crypto_type: str, amount: str):
    """Handle crypto payment with specific amount"""
    crypto_names = {
        "btc": "Bitcoin (BTC)",
        "eth": "Ethereum (ETH)", 
        "usdt": "USDT",
        "ltc": "Litecoin (LTC)"
    }
    
    try:
        amount_float = float(amount)
        if amount_float < 100:
            await send_telegram_message(
                chat_id,
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100 ‚ÇΩ",
                reply_markup=create_back_keyboard()
            )
            return
            
        # Here you would integrate with your crypto payment processor
        # For now, we'll just show a mock wallet address
        wallet_text = f"üí∞ *–ü–û–ü–û–õ–ù–ï–ù–ò–ï –ß–ï–†–ï–ó {crypto_names.get(crypto_type, crypto_type.upper())}*\n\n"
        wallet_text += f"üíé –°—É–º–º–∞: {amount_float} ‚ÇΩ\n\n"
        wallet_text += f"üìã *–ê–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:*\n`bc1q...`\n\n"  # Replace with actual wallet
        wallet_text += f"‚ö° *–°—Ç–∞—Ç—É—Å:* –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã\n"
        wallet_text += f"‚è±Ô∏è *–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ:* 1-30 –º–∏–Ω—É—Ç\n\n"
        wallet_text += f"üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* @Sigicara"
        
        await send_telegram_message(chat_id, wallet_text, reply_markup=create_back_keyboard())
        
    except ValueError:
        await send_telegram_message(
            chat_id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞",
            reply_markup=create_back_keyboard()
        )

async def handle_crypto_payment(chat_id: int, user: User, crypto_type: str):
    """Handle crypto payment selection"""
    crypto_names = {
        "btc": "Bitcoin (BTC)",
        "eth": "Ethereum (ETH)", 
        "usdt": "USDT",
        "ltc": "Litecoin (LTC)"
    }
    
    crypto_text = f"üí∞ *–ü–û–ü–û–õ–ù–ï–ù–ò–ï –ß–ï–†–ï–ó {crypto_names.get(crypto_type, crypto_type.upper())}*\n\n"
    crypto_text += f"üìù *–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:*\n"
    crypto_text += f"–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n\n"
    crypto_text += f"‚ö° *–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ: 1-30 –º–∏–Ω—É—Ç*"
    
    crypto_amounts_keyboard = {
        "inline_keyboard": [
            [
                {"text": "100‚ÇΩ", "callback_data": f"crypto_{crypto_type}_100"},
                {"text": "250‚ÇΩ", "callback_data": f"crypto_{crypto_type}_250"}
            ],
            [
                {"text": "500‚ÇΩ", "callback_data": f"crypto_{crypto_type}_500"},
                {"text": "1000‚ÇΩ", "callback_data": f"crypto_{crypto_type}_1000"}
            ],
            [
                {"text": "2000‚ÇΩ", "callback_data": f"crypto_{crypto_type}_2000"},
                {"text": "5000‚ÇΩ", "callback_data": f"crypto_{crypto_type}_5000"}
            ],
            [
                {"text": "üí∞ –°–≤–æ—è —Å—É–º–º–∞", "callback_data": f"crypto_{crypto_type}_custom"}
            ],
            [
                {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": "pay_crypto"}
            ]
        ]
    }
    
    await send_telegram_message(chat_id, crypto_text, reply_markup=crypto_amounts_keyboard)

async def handle_stars_custom_amount(chat_id: int, user: User):
    """Handle custom amount for Telegram Stars payment"""
    await set_user_state(user.telegram_id, "waiting_custom_amount_stars")
    
    text = f"üí∞ *–°–í–û–Ø –°–£–ú–ú–ê –ü–û–ü–û–õ–ù–ï–ù–ò–Ø*\n\n"
    text += f"‚≠ê *–ö—É—Ä—Å:* 1 –∑–≤–µ–∑–¥–∞ = 2‚ÇΩ\n\n"
    text += f"üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–æ—Ç 100‚ÇΩ –¥–æ 50,000‚ÇΩ)\n"
    text += f"üí° –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–∞ 50‚ÇΩ\n\n"
    text += f"‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É"
    
    await send_telegram_message(
        chat_id,
        text,
        reply_markup=create_back_keyboard()
    )
async def handle_crypto_custom_amount(chat_id: int, user: User, crypto_type: str):
    """Handle custom amount for crypto payment"""
    crypto_names = {
        "btc": "Bitcoin (BTC)",
        "eth": "Ethereum (ETH)", 
        "usdt": "USDT",
        "ltc": "Litecoin (LTC)"
    }
    
    await set_user_state(user.telegram_id, "waiting_custom_amount_crypto", {"crypto_type": crypto_type})
    
    text = f"üí∞ *–°–í–û–Ø –°–£–ú–ú–ê –ü–û–ü–û–õ–ù–ï–ù–ò–Ø*\n\n"
    text += f"ü§ñ *–í–∞–ª—é—Ç–∞:* {crypto_names.get(crypto_type, crypto_type.upper())}\n\n"
    text += f"üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–æ—Ç 100‚ÇΩ –¥–æ 50,000‚ÇΩ)\n"
    text += f"üí° –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–∞ 50‚ÇΩ\n\n"
    text += f"‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É"
    
    await send_telegram_message(
        chat_id,
        text,
        reply_markup=create_back_keyboard()
    )

async def handle_stars_payment(chat_id: int, user: User, amount: str):
    """Handle Telegram Stars payment"""
    amounts = {
        "100": (50, 100),
        "250": (125, 250),
        "500": (250, 500),
        "1000": (500, 1000),
        "2000": (1000, 2000)
    }
    
    if amount not in amounts:
        return
        
    stars_needed, rubles = amounts[amount]
    
    # Create Telegram Stars invoice
    try:
        invoice_payload = f"stars_payment_{user.telegram_id}_{amount}"
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendInvoice"
        invoice_data = {
            "chat_id": chat_id,
            "title": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {rubles}‚ÇΩ",
            "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ –£–ó–†–ò —á–µ—Ä–µ–∑ Telegram Stars",
            "payload": invoice_payload,
            "currency": "XTR",  # Telegram Stars currency
            "prices": [{"label": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {rubles}‚ÇΩ", "amount": stars_needed}]
        }
        
        response = requests.post(url, json=invoice_data)
        if response.status_code == 200:
            await send_telegram_message(
                chat_id,
                f"‚≠ê *–û–ü–õ–ê–¢–ê –ó–í–ï–ó–î–ê–ú–ò*\n\nüí∞ –°—É–º–º–∞: {rubles}‚ÇΩ\n‚≠ê –ö –æ–ø–ª–∞—Ç–µ: {stars_needed} –∑–≤–µ–∑–¥\n\nüëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã"
            )
        else:
            await send_telegram_message(
                chat_id,
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @Sigicara",
                reply_markup=create_back_keyboard()
            )
    except Exception as e:
        await send_telegram_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @Sigicara",
            reply_markup=create_back_keyboard()
        )

async def handle_purchase_callback(chat_id: int, user: User, data: str):
    """Handle subscription purchase callbacks"""
    prices = {
        "buy_day_sub": (149.0, "day", 1),
        "buy_3days_sub": (299.0, "3days", 3),
        "buy_month_sub": (1700.0, "month", 30)
    }
    
    if data in prices:
        price, sub_type, days = prices[data]
        
        if user.balance >= price:
            # Purchase subscription
            expires = datetime.utcnow() + timedelta(days=days)
            
            await db.users.update_one(
                {"telegram_id": user.telegram_id},
                {
                    "$set": {
                        "subscription_type": sub_type,
                        "subscription_expires": expires,
                        "daily_searches_used": 0,
                        "daily_searches_reset": datetime.utcnow()
                    },
                    "$inc": {"balance": -price}
                }
            )
            
            sub_names = {"day": "1 –¥–µ–Ω—å", "3days": "3 –¥–Ω—è", "month": "1 –º–µ—Å—è—Ü"}
            await send_telegram_message(
                chat_id,
                f"üéâ *–ü–û–î–ü–ò–°–ö–ê –û–§–û–†–ú–õ–ï–ù–ê!*\n\n‚≠ê –¢–∞—Ä–∏—Ñ: {sub_names[sub_type]}\nüí∞ –°–ø–∏—Å–∞–Ω–æ: {price} ‚ÇΩ\nüìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires.strftime('%d.%m.%Y %H:%M')}\n\nüîç –î–æ—Å—Ç—É–ø–Ω–æ –¥–æ 12 –ø–æ–∏—Å–∫–æ–≤ –≤ –¥–µ–Ω—å!",
                reply_markup=create_main_menu()
            )
        else:
            needed = price - user.balance
            await send_telegram_message(
                chat_id,
                f"‚ùå *–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í*\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f} ‚ÇΩ\nüíé –ù—É–∂–Ω–æ: {price} ‚ÇΩ\nüìà –î–æ–ø–ª–∞—Ç–∏—Ç—å: {needed:.2f} ‚ÇΩ",
                reply_markup=create_balance_menu()
            )

async def handle_custom_stars_amount_input(chat_id: int, user: User, text: str):
    """Handle custom amount input for stars payment"""
    await clear_user_state(user.telegram_id)
    
    is_valid, error_msg, amount = validate_custom_amount(text)
    if not is_valid:
        await send_telegram_message(
            chat_id,
            f"‚ùå *–û—à–∏–±–∫–∞:* {error_msg}",
            reply_markup=create_back_keyboard()
        )
        return
    
    stars_needed = int(amount / 2)  # 1 star = 2‚ÇΩ
    
    # Create Telegram Stars invoice
    try:
        invoice_payload = f"stars_payment_{user.telegram_id}_{amount}"
        
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendInvoice"
        invoice_data = {
            "chat_id": chat_id,
            "title": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount}‚ÇΩ",
            "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ –£–ó–†–ò —á–µ—Ä–µ–∑ Telegram Stars",
            "payload": invoice_payload,
            "currency": "XTR",  # Telegram Stars currency
            "prices": [{"label": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount}‚ÇΩ", "amount": stars_needed}]
        }
        
        response = requests.post(url, json=invoice_data)
        if response.status_code == 200:
            await send_telegram_message(
                chat_id,
                f"‚≠ê *–û–ü–õ–ê–¢–ê –ó–í–ï–ó–î–ê–ú–ò*\n\nüí∞ –°—É–º–º–∞: {amount}‚ÇΩ\n‚≠ê –ö –æ–ø–ª–∞—Ç–µ: {stars_needed} –∑–≤–µ–∑–¥\n\nüëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã"
            )
        else:
            await send_telegram_message(
                chat_id,
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @Sigicara",
                reply_markup=create_back_keyboard()
            )
    except Exception as e:
        await send_telegram_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @Sigicara",
            reply_markup=create_back_keyboard()
        )

async def handle_custom_crypto_amount_input(chat_id: int, user: User, text: str, crypto_type: str):
    """Handle custom amount input for crypto payment"""
    await clear_user_state(user.telegram_id)
    
    is_valid, error_msg, amount = validate_custom_amount(text)
    if not is_valid:
        await send_telegram_message(
            chat_id,
            f"‚ùå *–û—à–∏–±–∫–∞:* {error_msg}",
            reply_markup=create_back_keyboard()
        )
        return
    
    await handle_crypto_payment_amount(chat_id, user, crypto_type, str(amount))


async def handle_pre_checkout_query(pre_checkout_query: Dict[str, Any]):
    """Handle pre-checkout query from Telegram Stars payments"""
    try:
        query_id = pre_checkout_query.get('id')
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/answerPreCheckoutQuery"
        
        # Always approve the payment at this stage
        payload = {
            "pre_checkout_query_id": query_id,
            "ok": True
        }
        
        response = requests.post(url, json=payload)
        if response.status_code != 200:
            logging.error(f"Failed to answer pre-checkout query: {response.text}")
            
    except Exception as e:
        logging.error(f"Error handling pre-checkout query: {e}")

async def handle_successful_payment(message: Dict[str, Any]):
    """Handle successful payment notification"""
    try:
        payment_info = message.get('successful_payment', {})
        chat_id = message.get('chat', {}).get('id')
        
        if not payment_info or not chat_id:
            return
            
        # Extract payment details
        total_amount = float(payment_info.get('total_amount', 0)) / 100  # Convert from kopeks to rubles
        payload = payment_info.get('invoice_payload', '')
        
        # Parse payload (format: "stars_payment_USER_ID_AMOUNT")
        parts = payload.split('_')
        if len(parts) >= 4 and parts[0] == 'stars' and parts[1] == 'payment':
            user_id = int(parts[2])
            amount = float(parts[3])
            
            # Create payment record
            payment = Payment(
                user_id=user_id,
                amount=amount,
                payment_type="stars",
                payment_id=payment_info.get('telegram_payment_charge_id'),
                status="completed"
            )
            
            # Save payment to database
            await db.payments.insert_one(payment.dict())
            
            # Update user balance
            await db.users.update_one(
                {"telegram_id": user_id},
                {"$inc": {"balance": amount}}
            )
            
            # Send confirmation message
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
            message_text = (
                f"‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!*\n\n"
                f"üí∞ –°—É–º–º–∞: {amount} ‚ÇΩ\n"
                f"üí´ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω\n\n"
                f"üîç –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º!"
            )
            
            payload = {
                "chat_id": chat_id,
                "text": message_text,
                "parse_mode": "Markdown"
            }
            
            requests.post(url, json=payload)
            
    except Exception as e:
        logging.error(f"Error handling successful payment: {e}")
async def handle_telegram_update(update_data: Dict[str, Any]):
    """Process incoming Telegram update"""
    # Handle pre_checkout_query for Telegram Stars payments
    pre_checkout_query = update_data.get('pre_checkout_query')
    if pre_checkout_query:
        await handle_pre_checkout_query(pre_checkout_query)
        return
    
    callback_query = update_data.get('callback_query')
    if callback_query:
        await handle_callback_query(callback_query)
        return
    
    message = update_data.get('message')
    if not message:
        return
    
    # Handle successful payment notifications
    if message.get('successful_payment'):
        await handle_successful_payment(message)
        return

    chat_id = message.get('chat', {}).get('id')
    text = message.get('text', '')
    user_info = message.get('from', {})
    
    if not chat_id:
        return

    # Get or create user for all message types
    user, is_new_user = await get_or_create_user(
        telegram_id=user_info.get('id', chat_id),
        username=user_info.get('username'),
        first_name=user_info.get('first_name'),
        last_name=user_info.get('last_name')
    )

    # Check if user is waiting for custom amount input
    user_state = await get_user_state(user.telegram_id)
    if user_state:
        if user_state.state == "waiting_custom_amount_stars":
            await handle_custom_stars_amount_input(chat_id, user, text)
            return
        elif user_state.state == "waiting_custom_amount_crypto":
            crypto_type = user_state.data.get("crypto_type", "btc")
            await handle_custom_crypto_amount_input(chat_id, user, text, crypto_type)
            return

    # Handle /start command
    if text.startswith('/start'):
        parts = text.split()
        referral_code = None
        if len(parts) > 1:
            referral_code = parts[1]
            # Process referral for existing user
            await process_referral(user.telegram_id, referral_code)
        
        if not user.is_admin:
            is_subscribed = await check_subscription(user.telegram_id)
            if not is_subscribed:
                await send_telegram_message(
                    chat_id,
                    f"üéØ *–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –£–ó–†–ò!*\n\nüîí *–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @uzrisebya*",
                    reply_markup=create_subscription_keyboard()
                )
                return
        
        await show_main_menu(chat_id, user)
    
    # Handle admin balance commands
    elif user.is_admin and ' ' in text and text.split()[0].isdigit():
        parts = text.split()
        if len(parts) == 2:
            try:
                target_id = int(parts[0])
                amount = float(parts[1])
                
                result = await db.users.update_one(
                    {"telegram_id": target_id},
                    {"$inc": {"balance": amount}}
                )
                
                if result.modified_count > 0:
                    await send_telegram_message(
                        chat_id,
                        f"‚úÖ *–ë–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω*\n\nüë§ ID: {target_id}\nüí∞ –°—É–º–º–∞: {amount} ‚ÇΩ"
                    )
                    
                    await send_telegram_message(
                        target_id,
                        f"üéÅ *–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*\n\nüí∞ –ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ: {amount} ‚ÇΩ\n\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º!"
                    )
                else:
                    await send_telegram_message(chat_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except:
                await send_telegram_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
    
    # Handle search queries
    else:
        await handle_search_query(chat_id, text, user)

async def handle_search_query(chat_id: int, query: str, user: User):
    """Handle search query"""
    if not user.is_admin:
        is_subscribed = await check_subscription(user.telegram_id)
        if not is_subscribed:
            await send_telegram_message(
                chat_id,
                "üîí –î–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ @uzrisebya",
                reply_markup=create_subscription_keyboard()
            )
            return
    
    can_search_result, payment_method = await can_search(user)
    
    if not can_search_result and not user.is_admin:
        if "–ø—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç" in payment_method:
            await send_telegram_message(
                chat_id,
                "‚è∞ *–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω*\n\n–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ 12 –ø–æ–∏—Å–∫–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
                reply_markup=create_main_menu()
            )
        else:
            await send_telegram_message(
                chat_id,
                f"üí∞ *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤*\n\n–î–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω–æ 25 ‚ÇΩ\n–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f} ‚ÇΩ",
                reply_markup=create_balance_menu()
            )
        return
    
    search_type = detect_search_type(query)
    
    await send_telegram_message(
        chat_id,
        f"üîç *–í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...*\n{search_type}\n‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )
    
    try:
        results = await usersbox_request("/search", {"q": query})
        
        formatted_results = format_search_results(results, query, search_type)
        await send_telegram_message(chat_id, formatted_results, reply_markup=create_main_menu())
        
        # Process payment and save search
        cost = 0.0
        if not user.is_admin:
            if await has_active_subscription(user):
                await db.users.update_one(
                    {"telegram_id": user.telegram_id},
                    {"$inc": {"daily_searches_used": 1}}
                )
                payment_method = "subscription"
            else:
                cost = 25.0
                await db.users.update_one(
                    {"telegram_id": user.telegram_id},
                    {"$inc": {"balance": -25.0}}
                )
                payment_method = "balance"
        
        search = Search(
            user_id=user.telegram_id,
            query=query,
            search_type=search_type,
            results=results,
            success=results.get('status') == 'success',
            cost=cost,
            payment_method=payment_method
        )
        await db.searches.insert_one(search.dict())
    
    except Exception as e:
        await send_telegram_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_menu()
        )

async def set_user_state(user_id: int, state: str, data: Dict[str, Any] = None):
    """Set user state for custom input"""
    user_state = UserState(
        user_id=user_id,
        state=state,
        data=data or {}
    )
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    await db.user_states.delete_many({"user_id": user_id})
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.user_states.insert_one(user_state.dict())

async def get_user_state(user_id: int) -> Optional[UserState]:
    """Get user state"""
    state_data = await db.user_states.find_one({"user_id": user_id})
    if state_data:
        return UserState(**state_data)
    return None

async def clear_user_state(user_id: int):
    """Clear user state"""
    await db.user_states.delete_many({"user_id": user_id})

def validate_custom_amount(amount_str: str) -> tuple[bool, str, float]:
    """Validate custom amount input"""
    try:
        amount = float(amount_str)
        
        if amount < 100:
            return False, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 100‚ÇΩ", 0
        
        if amount % 50 != 0:
            return False, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–∞ 50‚ÇΩ", 0
            
        if amount > 50000:
            return False, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 50,000‚ÇΩ", 0
            
        return True, "", amount
        
    except ValueError:
        return False, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)", 0

async def create_cryptobot_invoice(amount: float, currency: str = "RUB") -> Dict[str, Any]:
    """Create CryptoBot invoice"""
    try:
        url = f"{CRYPTOBOT_BASE_URL}/createInvoice"
        headers = {
            "Crypto-Pay-API-Token": CRYPTOBOT_TOKEN,
            "Content-Type": "application/json"
        }
        
        payload = {
            "currency_type": "fiat",
            "fiat": currency,
            "amount": str(amount),
            "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –£–ó–†–ò –Ω–∞ {amount}‚ÇΩ",
            "paid_btn_name": "callback",
            "paid_btn_url": "https://t.me/search1_test_bot"
        }
        
        response = requests.post(url, headers=headers, json=payload, timeout=30)
        return response.json()
        
    except Exception as e:
        logging.error(f"CryptoBot API error: {e}")
        return {"ok": False, "error": {"message": str(e)}}

async def handle_pre_checkout_query(pre_checkout_query: Dict[str, Any]):
    """Handle pre-checkout query for Telegram Stars payments"""
    query_id = pre_checkout_query.get('id')
    user_id = pre_checkout_query.get('from', {}).get('id')
    invoice_payload = pre_checkout_query.get('invoice_payload', '')
    
    try:
        # Always approve the pre-checkout query for valid Stars payments
        if invoice_payload.startswith('stars_payment_'):
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/answerPreCheckoutQuery"
            data = {
                "pre_checkout_query_id": query_id,
                "ok": True
            }
            requests.post(url, json=data, timeout=10)
            logging.info(f"Pre-checkout approved for user {user_id}")
        else:
            # Reject invalid payments
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/answerPreCheckoutQuery"
            data = {
                "pre_checkout_query_id": query_id,
                "ok": False,
                "error_message": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂"
            }
            requests.post(url, json=data, timeout=10)
            logging.warning(f"Pre-checkout rejected for user {user_id}: invalid payload")
    except Exception as e:
        logging.error(f"Error handling pre-checkout query: {e}")

async def handle_successful_payment(message: Dict[str, Any]):
    """Handle successful payment notification"""
    payment_info = message.get('successful_payment', {})
    user_id = message.get('from', {}).get('id')
    chat_id = message.get('chat', {}).get('id')
    
    # Extract payment details
    total_amount = payment_info.get('total_amount', 0)  # In stars
    currency = payment_info.get('currency', 'XTR')
    invoice_payload = payment_info.get('invoice_payload', '')
    
    try:
        # Process Stars payment
        if currency == 'XTR' and invoice_payload.startswith('stars_payment_'):
            # Extract amount from payload: stars_payment_{user_id}_{amount}
            payload_parts = invoice_payload.split('_')
            if len(payload_parts) >= 3:
                ruble_amount = float(payload_parts[2])
            else:
                ruble_amount = total_amount * 2  # 1 star = 2 rubles
            
            # Update user balance
            result = await db.users.update_one(
                {"telegram_id": user_id},
                {"$inc": {"balance": ruble_amount}}
            )
            
            if result.modified_count > 0:
                # Save payment record
                payment = Payment(
                    user_id=user_id,
                    amount=ruble_amount,
                    payment_type="stars",
                    payment_id=payment_info.get('telegram_payment_charge_id'),
                    status="completed"
                )
                await db.payments.insert_one(payment.dict())
                
                # Send notification to user
                notification_text = f"üéâ *–ü–û–ü–û–õ–ù–ï–ù–ò–ï –£–°–ü–ï–®–ù–û!*\n\n"
                notification_text += f"‚≠ê *–°–ø–æ—Å–æ–±:* Telegram Stars\n"
                notification_text += f"üí∞ *–°—É–º–º–∞:* {ruble_amount}‚ÇΩ\n"
                notification_text += f"‚≠ê *–ó–≤–µ–∑–¥ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:* {total_amount}\n\n"
                notification_text += f"‚úÖ *–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å*\n"
                notification_text += f"üîç *–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º!*"
                
                await send_telegram_message(
                    chat_id,
                    notification_text,
                    reply_markup=create_main_menu()
                )
                
                logging.info(f"Stars payment processed: {ruble_amount}‚ÇΩ for user {user_id}")
            else:
                logging.error(f"Failed to update balance for user {user_id}")
        else:
            logging.warning(f"Unknown payment type: currency={currency}, payload={invoice_payload}")
            
    except Exception as e:
        logging.error(f"Error processing successful payment: {e}")
        
        # Send error notification to user
        await send_telegram_message(
            chat_id,
            "‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞*\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @Sigicara",
            reply_markup=create_back_keyboard()
        )

async def process_referral(referred_user_id: int, referral_code: str) -> bool:
    """Process referral"""
    try:
        referrer = await db.users.find_one({"referral_code": referral_code})
        if not referrer or referrer['telegram_id'] == referred_user_id:
            return False

        existing_referral = await db.referrals.find_one({
            "referrer_id": referrer['telegram_id'],
            "referred_id": referred_user_id
        })
        if existing_referral:
            return False

        referral = Referral(
            referrer_id=referrer['telegram_id'],
            referred_id=referred_user_id,
            confirmed=False
        )
        await db.referrals.insert_one(referral.dict())

        await db.users.update_one(
            {"telegram_id": referrer['telegram_id']},
            {"$inc": {"total_referrals": 1}}
        )

        await send_telegram_message(
            referrer['telegram_id'],
            f"üë• *–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ\nüîç 1 –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"
        )

        return True
    except Exception as e:
        logging.error(f"Referral processing error: {e}")
        return False

# API endpoints
@api_router.get("/users")
async def get_users():
    """Get all users"""
    users = await db.users.find().to_list(1000)
    for user in users:
        user["_id"] = str(user["_id"])
    return users

@api_router.get("/stats")
async def get_stats():
    """Get bot statistics"""
    total_users = await db.users.count_documents({})
    total_searches = await db.searches.count_documents({})
    total_referrals = await db.referrals.count_documents({})
    active_subs = await db.users.count_documents({"subscription_expires": {"$gt": datetime.utcnow()}})

    return {
        "total_users": total_users,
        "total_searches": total_searches,
        "total_referrals": total_referrals,
        "active_subscriptions": active_subs
    }

# Include the router in the main app
app.include_router(api_router)

app.add_middleware(
    CORSMiddleware,
    allow_credentials=True,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@app.on_event("shutdown")
async def shutdown_db_client():
    client.close()